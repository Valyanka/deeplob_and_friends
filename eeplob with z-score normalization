{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":7036795,"sourceType":"datasetVersion","datasetId":4048333},{"sourceId":7067452,"sourceType":"datasetVersion","datasetId":4069664}],"dockerImageVersionId":30588,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# DeepLOB: Deep Convolutional Neural Networks for Limit Order Books\n\n### Authors: Zihao Zhang, Stefan Zohren and Stephen Roberts\nOxford-Man Institute of Quantitative Finance, Department of Engineering Science, University of Oxford\n\nThis jupyter notebook is used to demonstrate our recent paper [2] published in IEEE Transactions on Singal Processing. We use FI-2010 [1] dataset and present how model architecture is constructed here. \n\n### Data:\nThe FI-2010 is publicly avilable and interested readers can check out their paper [1]. The dataset can be downloaded from: https://etsin.fairdata.fi/dataset/73eb48d7-4dbc-4a10-a52a-da745b47a649 \n\nOtherwise, the notebook will download the data automatically or it can be obtained from: \n\nhttps://drive.google.com/drive/folders/1Xen3aRid9ZZhFqJRgEMyETNazk02cNmv?usp=sharing\n\n### References:\n[1] Ntakaris A, Magris M, Kanniainen J, Gabbouj M, Iosifidis A. Benchmark dataset for mid‐price forecasting of limit order book data with machine learning methods. Journal of Forecasting. 2018 Dec;37(8):852-66. https://arxiv.org/abs/1705.03233\n\n[2] Zhang Z, Zohren S, Roberts S. DeepLOB: Deep convolutional neural networks for limit order books. IEEE Transactions on Signal Processing. 2019 Mar 25;67(11):3001-12. https://arxiv.org/abs/1808.03668\n\n### This notebook runs on Pytorch 1.9.0.","metadata":{}},{"cell_type":"code","source":"import os \nif not os.path.isfile('data.zip'):\n    !wget https://raw.githubusercontent.com/zcakhaa/DeepLOB-Deep-Convolutional-Neural-Networks-for-Limit-Order-Books/master/data/data.zip\n    !unzip -n data.zip\n    print('data downloaded.')\nelse:\n    print('data already existed.')","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:07.946755Z","iopub.execute_input":"2023-11-28T13:16:07.947680Z","iopub.status.idle":"2023-11-28T13:16:15.743294Z","shell.execute_reply.started":"2023-11-28T13:16:07.947642Z","shell.execute_reply":"2023-11-28T13:16:15.742125Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"--2023-11-28 13:16:08--  https://raw.githubusercontent.com/zcakhaa/DeepLOB-Deep-Convolutional-Neural-Networks-for-Limit-Order-Books/master/data/data.zip\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 56278154 (54M) [application/zip]\nSaving to: ‘data.zip’\n\ndata.zip            100%[===================>]  53.67M   218MB/s    in 0.2s    \n\n2023-11-28 13:16:10 (218 MB/s) - ‘data.zip’ saved [56278154/56278154]\n\nArchive:  data.zip\n  inflating: Test_Dst_NoAuction_DecPre_CF_7.txt  \n  inflating: Test_Dst_NoAuction_DecPre_CF_9.txt  \n  inflating: Test_Dst_NoAuction_DecPre_CF_8.txt  \n  inflating: Train_Dst_NoAuction_DecPre_CF_7.txt  \ndata downloaded.\n","output_type":"stream"}]},{"cell_type":"code","source":"# load packages\nimport pandas as pd\nimport pickle\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom tqdm import tqdm \nfrom sklearn.metrics import accuracy_score, classification_report\n\nimport torch\nimport torch.nn.functional as F\nfrom torch.utils import data\nfrom torchinfo import summary\nimport torch.nn as nn\nimport torch.optim as optim\nimport scipy\n# from sklearn.model_selection import train_test_split\n# X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.33)\n# N, D = X_train.shape","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:15.745753Z","iopub.execute_input":"2023-11-28T13:16:15.746668Z","iopub.status.idle":"2023-11-28T13:16:22.228305Z","shell.execute_reply.started":"2023-11-28T13:16:15.746625Z","shell.execute_reply":"2023-11-28T13:16:22.227444Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.3\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:22.229321Z","iopub.execute_input":"2023-11-28T13:16:22.229737Z","iopub.status.idle":"2023-11-28T13:16:22.234167Z","shell.execute_reply.started":"2023-11-28T13:16:22.229710Z","shell.execute_reply":"2023-11-28T13:16:22.233252Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"ask_prices = []\nwith open('/kaggle/input/denis-data/rosn_data_sample/_ask_prices.txt') as f:\n    lines = f.readlines()\n    for line in lines:\n        ask_prices.append(list(map(float, line.split(','))))","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:22.236274Z","iopub.execute_input":"2023-11-28T13:16:22.236567Z","iopub.status.idle":"2023-11-28T13:16:28.830094Z","shell.execute_reply.started":"2023-11-28T13:16:22.236536Z","shell.execute_reply":"2023-11-28T13:16:28.829221Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"ask_vols = []\nwith open('/kaggle/input/denis-data/rosn_data_sample/_ask_vols.txt') as f:\n    lines = f.readlines()\n    for line in lines:\n        ask_vols.append(list(map(float, line.split(','))))","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:28.831262Z","iopub.execute_input":"2023-11-28T13:16:28.831582Z","iopub.status.idle":"2023-11-28T13:16:34.092470Z","shell.execute_reply.started":"2023-11-28T13:16:28.831553Z","shell.execute_reply":"2023-11-28T13:16:34.091372Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"bid_prices = []\nwith open('/kaggle/input/denis-data/rosn_data_sample/_bid_prices.txt') as f:\n    lines = f.readlines()\n    for line in lines:\n        bid_prices.append(list(map(float, line.split(','))))","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:34.094127Z","iopub.execute_input":"2023-11-28T13:16:34.094422Z","iopub.status.idle":"2023-11-28T13:16:40.840542Z","shell.execute_reply.started":"2023-11-28T13:16:34.094396Z","shell.execute_reply":"2023-11-28T13:16:40.839524Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"bid_vols = []\nwith open('/kaggle/input/denis-data/rosn_data_sample/_bid_vols.txt') as f:\n    lines = f.readlines()\n    for line in lines:\n        bid_vols.append(list(map(float, line.split(','))))","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:40.841820Z","iopub.execute_input":"2023-11-28T13:16:40.842187Z","iopub.status.idle":"2023-11-28T13:16:46.123738Z","shell.execute_reply.started":"2023-11-28T13:16:40.842159Z","shell.execute_reply":"2023-11-28T13:16:46.122659Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"targets = []\nwith open('/kaggle/input/denis-data/rosn_data_sample/_targets.txt') as f:\n    lines = f.readlines()\n    for line in lines:\n        targets.append(float(line))","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:46.125231Z","iopub.execute_input":"2023-11-28T13:16:46.125607Z","iopub.status.idle":"2023-11-28T13:16:46.410633Z","shell.execute_reply.started":"2023-11-28T13:16:46.125572Z","shell.execute_reply":"2023-11-28T13:16:46.409583Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"def prerprocces_data(ask_prices, ask_vols, bid_prices, bid_vols):\n    data = []\n    for time in range(len(ask_prices)):\n        cur = []\n        for level in range(10):\n            cur.extend([ask_prices[time][level], ask_vols[time][level], bid_prices[time][level], bid_vols[time][level]])\n        data.append(cur)\n    return data\n        \n        ","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:46.411918Z","iopub.execute_input":"2023-11-28T13:16:46.413315Z","iopub.status.idle":"2023-11-28T13:16:46.428161Z","shell.execute_reply.started":"2023-11-28T13:16:46.413281Z","shell.execute_reply":"2023-11-28T13:16:46.427164Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"my_data = prerprocces_data(ask_prices, ask_vols, bid_prices, bid_vols)","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:46.432984Z","iopub.execute_input":"2023-11-28T13:16:46.433617Z","iopub.status.idle":"2023-11-28T13:16:49.567654Z","shell.execute_reply.started":"2023-11-28T13:16:46.433586Z","shell.execute_reply":"2023-11-28T13:16:49.566124Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"dataset_train = my_data[:int(np.floor(len(my_data) * 0.6))]\ntargets_train = targets[:int(np.floor(len(my_data) * 0.6))]\ndataset_val = my_data[int(np.floor(len(my_data) * 0.6)):int(np.floor(len(my_data) * 0.7))]\ntargets_val = targets[int(np.floor(len(my_data) * 0.6)):int(np.floor(len(my_data) * 0.7))]\ndataset_test = my_data[int(np.floor(len(my_data) * 0.7)):]\ntargets_test = targets[int(np.floor(len(my_data) * 0.7)):]","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:49.569028Z","iopub.execute_input":"2023-11-28T13:16:49.569438Z","iopub.status.idle":"2023-11-28T13:16:49.581577Z","shell.execute_reply.started":"2023-11-28T13:16:49.569401Z","shell.execute_reply":"2023-11-28T13:16:49.580552Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"dataset_train = scipy.stats.zscore(dataset_train, axis=0)\nprint('train done')\ndataset_val = scipy.stats.zscore(dataset_val, axis=0)\nprint('val done')\ndataset_test = scipy.stats.zscore(dataset_test, axis=0)\nprint('test done')","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:49.582992Z","iopub.execute_input":"2023-11-28T13:16:49.583364Z","iopub.status.idle":"2023-11-28T13:16:52.378226Z","shell.execute_reply.started":"2023-11-28T13:16:49.583328Z","shell.execute_reply":"2023-11-28T13:16:52.377257Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"train done\nval done\ntest done\n","output_type":"stream"}]},{"cell_type":"code","source":"d = {-1.0: 0, 0.0:1, 1.0:2}\ndef make_dataset(data, targets, T):\n    time_dataset = []\n    time_targets = []\n    for i in range(T, len(data)):\n        cur = data[i-T:i]\n        time_dataset.append(cur)\n        time_targets.append(d[targets[i]])\n    return time_dataset, time_targets\n        ","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:52.379458Z","iopub.execute_input":"2023-11-28T13:16:52.379743Z","iopub.status.idle":"2023-11-28T13:16:52.385897Z","shell.execute_reply.started":"2023-11-28T13:16:52.379717Z","shell.execute_reply":"2023-11-28T13:16:52.384899Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"time_dataset_train, time_targets_train = make_dataset(dataset_train, targets_train, 100)\ntime_dataset_val, time_targets_val = make_dataset(dataset_val, targets_val, 100)\ntime_dataset_test, time_targets_test = make_dataset(dataset_test, targets_test, 100)","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:52.387078Z","iopub.execute_input":"2023-11-28T13:16:52.387361Z","iopub.status.idle":"2023-11-28T13:16:52.681772Z","shell.execute_reply.started":"2023-11-28T13:16:52.387335Z","shell.execute_reply":"2023-11-28T13:16:52.680654Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"class Dataset(data.Dataset):\n    \"\"\"Characterizes a dataset for PyTorch\"\"\"\n    def __init__(self, time_dataset, time_targets, T):\n        \"\"\"Initialization\"\"\" \n        self.T = T\n        x, y = np.array(time_dataset), np.array(time_targets)\n        self.length = len(x)\n        x = torch.from_numpy(x)\n        self.x = torch.unsqueeze(x, 1)\n        self.y = torch.from_numpy(y)\n\n    def __len__(self):\n        \"\"\"Denotes the total number of samples\"\"\"\n        return self.length\n\n    def __getitem__(self, index):\n        \"\"\"Generates samples of data\"\"\"\n        return self.x[index], self.y[index]","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:52.683224Z","iopub.execute_input":"2023-11-28T13:16:52.683564Z","iopub.status.idle":"2023-11-28T13:16:52.691178Z","shell.execute_reply.started":"2023-11-28T13:16:52.683527Z","shell.execute_reply":"2023-11-28T13:16:52.690136Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"len(time_dataset[0])","metadata":{"execution":{"iopub.status.busy":"2023-11-27T21:39:39.440180Z","iopub.execute_input":"2023-11-27T21:39:39.440857Z","iopub.status.idle":"2023-11-27T21:39:39.446541Z","shell.execute_reply.started":"2023-11-27T21:39:39.440823Z","shell.execute_reply":"2023-11-27T21:39:39.445585Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:52.692541Z","iopub.execute_input":"2023-11-28T13:16:52.692911Z","iopub.status.idle":"2023-11-28T13:16:52.802371Z","shell.execute_reply.started":"2023-11-28T13:16:52.692875Z","shell.execute_reply":"2023-11-28T13:16:52.801185Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"cuda:0\n","output_type":"stream"}]},{"cell_type":"code","source":"int(np.floor(len(time_dataset) * 0.8))","metadata":{"execution":{"iopub.status.busy":"2023-11-27T20:35:07.226956Z","iopub.execute_input":"2023-11-27T20:35:07.227661Z","iopub.status.idle":"2023-11-27T20:35:07.234216Z","shell.execute_reply.started":"2023-11-27T20:35:07.227628Z","shell.execute_reply":"2023-11-27T20:35:07.233273Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data preparation\n\nWe used no auction dataset that is normalised by decimal precision approach in their work. The first seven days are training data and the last three days are testing data. A validation set (20%) from the training set is used to monitor the overfitting behaviours.  \n\nThe first 40 columns of the FI-2010 dataset are 10 levels ask and bid information for a limit order book and we only use these 40 features in our network. The last 5 columns of the FI-2010 dataset are the labels with different prediction horizons. ","metadata":{}},{"cell_type":"code","source":"batch_size = 16\n\ndataset_train = Dataset(time_dataset_train, time_targets_train, 100)\nprint('here')\ndataset_val = Dataset(time_dataset_val, time_targets_val, 100)\nprint('here1')\ndataset_test = Dataset(time_dataset_test, time_targets_test, 100)\nprint('here2')\ntrain_loader = torch.utils.data.DataLoader(dataset=dataset_train, batch_size=batch_size, shuffle=True)\nprint('here3')\nval_loader = torch.utils.data.DataLoader(dataset=dataset_val, batch_size=batch_size, shuffle=False)\ntest_loader = torch.utils.data.DataLoader(dataset=dataset_test, batch_size=batch_size, shuffle=False)\n\nprint(dataset_train.x.shape, dataset_train.y.shape)","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:52.803784Z","iopub.execute_input":"2023-11-28T13:16:52.804201Z","iopub.status.idle":"2023-11-28T13:16:55.587514Z","shell.execute_reply.started":"2023-11-28T13:16:52.804164Z","shell.execute_reply":"2023-11-28T13:16:55.586481Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"here\nhere1\nhere2\nhere3\ntorch.Size([208899, 1, 100, 40]) torch.Size([208899])\n","output_type":"stream"}]},{"cell_type":"code","source":"tmp_loader = torch.utils.data.DataLoader(dataset=dataset_train, batch_size=1, shuffle=True)\nfor x, y in tmp_loader:\n    print(x)\n    print(y)\n    print(x.shape, y.shape)\n    break","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2023-11-28T13:16:55.591920Z","iopub.execute_input":"2023-11-28T13:16:55.592260Z","iopub.status.idle":"2023-11-28T13:16:55.722814Z","shell.execute_reply.started":"2023-11-28T13:16:55.592232Z","shell.execute_reply":"2023-11-28T13:16:55.721717Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"tensor([[[[ 0.6761, -0.0800,  0.6726,  ...,  0.0032,  0.6532, -0.0820],\n          [ 0.6761, -0.0799,  0.6726,  ...,  0.0032,  0.6532, -0.0820],\n          [ 0.6761, -0.0793,  0.6726,  ...,  0.0032,  0.6532, -0.0820],\n          ...,\n          [ 0.5341, -0.0838,  0.5836,  ..., -0.0822,  0.5311, -0.4772],\n          [ 0.5341, -0.0838,  0.5836,  ...,  0.0099,  0.5311, -0.4772],\n          [ 0.5341, -0.0838,  0.5836,  ...,  0.0099,  0.5311, -0.4772]]]],\n       dtype=torch.float64)\ntensor([0])\ntorch.Size([1, 1, 100, 40]) torch.Size([1])\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Model Architecture\n\nPlease find the detailed discussion of our model architecture in our paper.","metadata":{}},{"cell_type":"code","source":"class deeplob(nn.Module):\n    def __init__(self, y_len):\n        super().__init__()\n        self.y_len = y_len\n        \n        # convolution blocks\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(in_channels=1, out_channels=32, kernel_size=(1,2), stride=(1,2)),\n            nn.LeakyReLU(negative_slope=0.01),\n#             nn.Tanh(),\n            nn.BatchNorm2d(32),\n            nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(4,1)),\n            nn.LeakyReLU(negative_slope=0.01),\n            nn.BatchNorm2d(32),\n            nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(4,1)),\n            nn.LeakyReLU(negative_slope=0.01),\n            nn.BatchNorm2d(32),\n        )\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(1,2), stride=(1,2)),\n            nn.Tanh(),\n            nn.BatchNorm2d(32),\n            nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(4,1)),\n            nn.Tanh(),\n            nn.BatchNorm2d(32),\n            nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(4,1)),\n            nn.Tanh(),\n            nn.BatchNorm2d(32),\n        )\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(1,10)),\n            nn.LeakyReLU(negative_slope=0.01),\n            nn.BatchNorm2d(32),\n            nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(4,1)),\n            nn.LeakyReLU(negative_slope=0.01),\n            nn.BatchNorm2d(32),\n            nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(4,1)),\n            nn.LeakyReLU(negative_slope=0.01),\n            nn.BatchNorm2d(32),\n        )\n        \n        # inception moduels\n        self.inp1 = nn.Sequential(\n            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=(1,1), padding='same'),\n            nn.LeakyReLU(negative_slope=0.01),\n            nn.BatchNorm2d(64),\n            nn.Conv2d(in_channels=64, out_channels=64, kernel_size=(3,1), padding='same'),\n            nn.LeakyReLU(negative_slope=0.01),\n            nn.BatchNorm2d(64),\n        )\n        self.inp2 = nn.Sequential(\n            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=(1,1), padding='same'),\n            nn.LeakyReLU(negative_slope=0.01),\n            nn.BatchNorm2d(64),\n            nn.Conv2d(in_channels=64, out_channels=64, kernel_size=(5,1), padding='same'),\n            nn.LeakyReLU(negative_slope=0.01),\n            nn.BatchNorm2d(64),\n        )\n        self.inp3 = nn.Sequential(\n            nn.MaxPool2d((3, 1), stride=(1, 1), padding=(1, 0)),\n            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=(1,1), padding='same'),\n            nn.LeakyReLU(negative_slope=0.01),\n            nn.BatchNorm2d(64),\n        )\n        \n        # lstm layers\n        self.lstm = nn.LSTM(input_size=192, hidden_size=64, num_layers=1, batch_first=True)\n        self.fc1 = nn.Linear(64, self.y_len)\n\n    def forward(self, x):\n        # h0: (number of hidden layers, batch size, hidden size)\n        h0 = torch.zeros(1, x.size(0), 64).to(device)\n        c0 = torch.zeros(1, x.size(0), 64).to(device)\n    \n        x = self.conv1(x)\n        x = self.conv2(x)\n        x = self.conv3(x)\n        \n        x_inp1 = self.inp1(x)\n        x_inp2 = self.inp2(x)\n        x_inp3 = self.inp3(x)  \n        \n        x = torch.cat((x_inp1, x_inp2, x_inp3), dim=1)\n        \n#         x = torch.transpose(x, 1, 2)\n        x = x.permute(0, 2, 1, 3)\n        x = torch.reshape(x, (-1, x.shape[1], x.shape[2]))\n        \n        x, _ = self.lstm(x, (h0, c0))\n        x = x[:, -1, :]\n        x = self.fc1(x)\n        forecast_y = torch.softmax(x, dim=1)\n        \n        return forecast_y","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:16:55.724485Z","iopub.execute_input":"2023-11-28T13:16:55.724895Z","iopub.status.idle":"2023-11-28T13:16:55.756826Z","shell.execute_reply.started":"2023-11-28T13:16:55.724838Z","shell.execute_reply":"2023-11-28T13:16:55.755743Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"model = deeplob(3)\nmodel.to(device)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2023-11-28T13:16:55.758222Z","iopub.execute_input":"2023-11-28T13:16:55.758948Z","iopub.status.idle":"2023-11-28T13:17:01.930829Z","shell.execute_reply.started":"2023-11-28T13:16:55.758905Z","shell.execute_reply":"2023-11-28T13:17:01.929776Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"deeplob(\n  (conv1): Sequential(\n    (0): Conv2d(1, 32, kernel_size=(1, 2), stride=(1, 2))\n    (1): LeakyReLU(negative_slope=0.01)\n    (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): Conv2d(32, 32, kernel_size=(4, 1), stride=(1, 1))\n    (4): LeakyReLU(negative_slope=0.01)\n    (5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (6): Conv2d(32, 32, kernel_size=(4, 1), stride=(1, 1))\n    (7): LeakyReLU(negative_slope=0.01)\n    (8): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (conv2): Sequential(\n    (0): Conv2d(32, 32, kernel_size=(1, 2), stride=(1, 2))\n    (1): Tanh()\n    (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): Conv2d(32, 32, kernel_size=(4, 1), stride=(1, 1))\n    (4): Tanh()\n    (5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (6): Conv2d(32, 32, kernel_size=(4, 1), stride=(1, 1))\n    (7): Tanh()\n    (8): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (conv3): Sequential(\n    (0): Conv2d(32, 32, kernel_size=(1, 10), stride=(1, 1))\n    (1): LeakyReLU(negative_slope=0.01)\n    (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): Conv2d(32, 32, kernel_size=(4, 1), stride=(1, 1))\n    (4): LeakyReLU(negative_slope=0.01)\n    (5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (6): Conv2d(32, 32, kernel_size=(4, 1), stride=(1, 1))\n    (7): LeakyReLU(negative_slope=0.01)\n    (8): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (inp1): Sequential(\n    (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), padding=same)\n    (1): LeakyReLU(negative_slope=0.01)\n    (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): Conv2d(64, 64, kernel_size=(3, 1), stride=(1, 1), padding=same)\n    (4): LeakyReLU(negative_slope=0.01)\n    (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (inp2): Sequential(\n    (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), padding=same)\n    (1): LeakyReLU(negative_slope=0.01)\n    (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): Conv2d(64, 64, kernel_size=(5, 1), stride=(1, 1), padding=same)\n    (4): LeakyReLU(negative_slope=0.01)\n    (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (inp3): Sequential(\n    (0): MaxPool2d(kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), dilation=1, ceil_mode=False)\n    (1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), padding=same)\n    (2): LeakyReLU(negative_slope=0.01)\n    (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (lstm): LSTM(192, 64, batch_first=True)\n  (fc1): Linear(in_features=64, out_features=3, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"summary(model, (1, 1, 100, 40))","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2023-11-28T13:17:01.932052Z","iopub.execute_input":"2023-11-28T13:17:01.932369Z","iopub.status.idle":"2023-11-28T13:17:05.261391Z","shell.execute_reply.started":"2023-11-28T13:17:01.932341Z","shell.execute_reply":"2023-11-28T13:17:05.260294Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"==========================================================================================\nLayer (type:depth-idx)                   Output Shape              Param #\n==========================================================================================\ndeeplob                                  [1, 3]                    --\n├─Sequential: 1-1                        [1, 32, 94, 20]           --\n│    └─Conv2d: 2-1                       [1, 32, 100, 20]          96\n│    └─LeakyReLU: 2-2                    [1, 32, 100, 20]          --\n│    └─BatchNorm2d: 2-3                  [1, 32, 100, 20]          64\n│    └─Conv2d: 2-4                       [1, 32, 97, 20]           4,128\n│    └─LeakyReLU: 2-5                    [1, 32, 97, 20]           --\n│    └─BatchNorm2d: 2-6                  [1, 32, 97, 20]           64\n│    └─Conv2d: 2-7                       [1, 32, 94, 20]           4,128\n│    └─LeakyReLU: 2-8                    [1, 32, 94, 20]           --\n│    └─BatchNorm2d: 2-9                  [1, 32, 94, 20]           64\n├─Sequential: 1-2                        [1, 32, 88, 10]           --\n│    └─Conv2d: 2-10                      [1, 32, 94, 10]           2,080\n│    └─Tanh: 2-11                        [1, 32, 94, 10]           --\n│    └─BatchNorm2d: 2-12                 [1, 32, 94, 10]           64\n│    └─Conv2d: 2-13                      [1, 32, 91, 10]           4,128\n│    └─Tanh: 2-14                        [1, 32, 91, 10]           --\n│    └─BatchNorm2d: 2-15                 [1, 32, 91, 10]           64\n│    └─Conv2d: 2-16                      [1, 32, 88, 10]           4,128\n│    └─Tanh: 2-17                        [1, 32, 88, 10]           --\n│    └─BatchNorm2d: 2-18                 [1, 32, 88, 10]           64\n├─Sequential: 1-3                        [1, 32, 82, 1]            --\n│    └─Conv2d: 2-19                      [1, 32, 88, 1]            10,272\n│    └─LeakyReLU: 2-20                   [1, 32, 88, 1]            --\n│    └─BatchNorm2d: 2-21                 [1, 32, 88, 1]            64\n│    └─Conv2d: 2-22                      [1, 32, 85, 1]            4,128\n│    └─LeakyReLU: 2-23                   [1, 32, 85, 1]            --\n│    └─BatchNorm2d: 2-24                 [1, 32, 85, 1]            64\n│    └─Conv2d: 2-25                      [1, 32, 82, 1]            4,128\n│    └─LeakyReLU: 2-26                   [1, 32, 82, 1]            --\n│    └─BatchNorm2d: 2-27                 [1, 32, 82, 1]            64\n├─Sequential: 1-4                        [1, 64, 82, 1]            --\n│    └─Conv2d: 2-28                      [1, 64, 82, 1]            2,112\n│    └─LeakyReLU: 2-29                   [1, 64, 82, 1]            --\n│    └─BatchNorm2d: 2-30                 [1, 64, 82, 1]            128\n│    └─Conv2d: 2-31                      [1, 64, 82, 1]            12,352\n│    └─LeakyReLU: 2-32                   [1, 64, 82, 1]            --\n│    └─BatchNorm2d: 2-33                 [1, 64, 82, 1]            128\n├─Sequential: 1-5                        [1, 64, 82, 1]            --\n│    └─Conv2d: 2-34                      [1, 64, 82, 1]            2,112\n│    └─LeakyReLU: 2-35                   [1, 64, 82, 1]            --\n│    └─BatchNorm2d: 2-36                 [1, 64, 82, 1]            128\n│    └─Conv2d: 2-37                      [1, 64, 82, 1]            20,544\n│    └─LeakyReLU: 2-38                   [1, 64, 82, 1]            --\n│    └─BatchNorm2d: 2-39                 [1, 64, 82, 1]            128\n├─Sequential: 1-6                        [1, 64, 82, 1]            --\n│    └─MaxPool2d: 2-40                   [1, 32, 82, 1]            --\n│    └─Conv2d: 2-41                      [1, 64, 82, 1]            2,112\n│    └─LeakyReLU: 2-42                   [1, 64, 82, 1]            --\n│    └─BatchNorm2d: 2-43                 [1, 64, 82, 1]            128\n├─LSTM: 1-7                              [1, 82, 64]               66,048\n├─Linear: 1-8                            [1, 3]                    195\n==========================================================================================\nTotal params: 143,907\nTrainable params: 143,907\nNon-trainable params: 0\nTotal mult-adds (M): 35.53\n==========================================================================================\nInput size (MB): 0.02\nForward/backward pass size (MB): 4.97\nParams size (MB): 0.58\nEstimated Total Size (MB): 5.56\n=========================================================================================="},"metadata":{}}]},{"cell_type":"code","source":"criterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.0001)","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:17:05.262734Z","iopub.execute_input":"2023-11-28T13:17:05.263094Z","iopub.status.idle":"2023-11-28T13:17:05.268691Z","shell.execute_reply.started":"2023-11-28T13:17:05.263065Z","shell.execute_reply":"2023-11-28T13:17:05.267614Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"markdown","source":"# Model Training\n","metadata":{}},{"cell_type":"code","source":"# A function to encapsulate the training loop\ndef batch_gd(model, criterion, optimizer, train_loader, test_loader, epochs):\n    \n    train_losses = np.zeros(epochs)\n    test_losses = np.zeros(epochs)\n    best_test_loss = np.inf\n    best_test_epoch = 0\n\n    for it in tqdm(range(epochs)):\n        \n        model.train()\n        t0 = datetime.now()\n        train_loss = []\n        for inputs, targets in train_loader:\n            # move data to GPU\n            inputs, targets = inputs.to(device, dtype=torch.float), targets.to(device, dtype=torch.int64)\n            # print(\"inputs.shape:\", inputs.shape)\n            # zero the parameter gradients\n            optimizer.zero_grad()\n            # Forward pass\n            # print(\"about to get model output\")\n            outputs = model(inputs)\n            # print(\"done getting model output\")\n            # print(\"outputs.shape:\", outputs.shape, \"targets.shape:\", targets.shape)\n            loss = criterion(outputs, targets)\n            # Backward and optimize\n            # print(\"about to optimize\")\n            loss.backward()\n            optimizer.step()\n            train_loss.append(loss.item())\n        # Get train loss and test loss\n        train_loss = np.mean(train_loss) # a little misleading\n    \n        model.eval()\n        test_loss = []\n        for inputs, targets in test_loader:\n            inputs, targets = inputs.to(device, dtype=torch.float), targets.to(device, dtype=torch.int64)      \n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n            test_loss.append(loss.item())\n        test_loss = np.mean(test_loss)\n\n        # Save losses\n        train_losses[it] = train_loss\n        test_losses[it] = test_loss\n        \n        if test_loss < best_test_loss:\n            torch.save(model, './best_val_model_pytorch')\n            best_test_loss = test_loss\n            best_test_epoch = it\n            print('model saved')\n\n        dt = datetime.now() - t0\n        print(f'Epoch {it+1}/{epochs}, Train Loss: {train_loss:.4f}, \\\n          Validation Loss: {test_loss:.4f}, Duration: {dt}, Best Val Epoch: {best_test_epoch}')\n\n    return train_losses, test_losses","metadata":{"execution":{"iopub.status.busy":"2023-11-28T13:17:05.270109Z","iopub.execute_input":"2023-11-28T13:17:05.270428Z","iopub.status.idle":"2023-11-28T13:17:05.282706Z","shell.execute_reply.started":"2023-11-28T13:17:05.270380Z","shell.execute_reply":"2023-11-28T13:17:05.281533Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"train_losses, val_losses = batch_gd(model, criterion, optimizer, \n                                    train_loader, val_loader, epochs=50)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2023-11-28T13:17:05.283821Z","iopub.execute_input":"2023-11-28T13:17:05.284120Z","iopub.status.idle":"2023-11-28T15:06:00.615628Z","shell.execute_reply.started":"2023-11-28T13:17:05.284095Z","shell.execute_reply":"2023-11-28T15:06:00.614590Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stderr","text":"  2%|▏         | 1/50 [02:13<1:49:10, 133.69s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 1/50, Train Loss: 0.9231,           Validation Loss: 0.9830, Duration: 0:02:13.687437, Best Val Epoch: 0\n","output_type":"stream"},{"name":"stderr","text":"  4%|▍         | 2/50 [04:25<1:46:03, 132.58s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 2/50, Train Loss: 0.8273,           Validation Loss: 0.9357, Duration: 0:02:11.804433, Best Val Epoch: 1\n","output_type":"stream"},{"name":"stderr","text":"  6%|▌         | 3/50 [06:37<1:43:30, 132.13s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 3/50, Train Loss: 0.7859,           Validation Loss: 0.9429, Duration: 0:02:11.591107, Best Val Epoch: 1\n","output_type":"stream"},{"name":"stderr","text":"  8%|▊         | 4/50 [08:47<1:40:46, 131.45s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 4/50, Train Loss: 0.7586,           Validation Loss: 0.9067, Duration: 0:02:10.417151, Best Val Epoch: 3\n","output_type":"stream"},{"name":"stderr","text":" 10%|█         | 5/50 [11:02<1:39:28, 132.64s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 5/50, Train Loss: 0.7419,           Validation Loss: 0.8929, Duration: 0:02:14.748483, Best Val Epoch: 4\n","output_type":"stream"},{"name":"stderr","text":" 12%|█▏        | 6/50 [13:13<1:36:51, 132.09s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 6/50, Train Loss: 0.7292,           Validation Loss: 0.9074, Duration: 0:02:11.011200, Best Val Epoch: 4\n","output_type":"stream"},{"name":"stderr","text":" 14%|█▍        | 7/50 [15:24<1:34:33, 131.93s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 7/50, Train Loss: 0.7203,           Validation Loss: 0.9008, Duration: 0:02:11.604358, Best Val Epoch: 4\n","output_type":"stream"},{"name":"stderr","text":" 16%|█▌        | 8/50 [17:35<1:32:02, 131.49s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 8/50, Train Loss: 0.7120,           Validation Loss: 0.8927, Duration: 0:02:10.529689, Best Val Epoch: 7\n","output_type":"stream"},{"name":"stderr","text":" 18%|█▊        | 9/50 [19:45<1:29:36, 131.14s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 9/50, Train Loss: 0.7053,           Validation Loss: 0.8907, Duration: 0:02:10.369525, Best Val Epoch: 8\n","output_type":"stream"},{"name":"stderr","text":" 20%|██        | 10/50 [21:56<1:27:18, 130.96s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 10/50, Train Loss: 0.7001,           Validation Loss: 0.9038, Duration: 0:02:10.551248, Best Val Epoch: 8\n","output_type":"stream"},{"name":"stderr","text":" 22%|██▏       | 11/50 [24:08<1:25:27, 131.46s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 11/50, Train Loss: 0.6948,           Validation Loss: 0.8882, Duration: 0:02:12.615619, Best Val Epoch: 10\n","output_type":"stream"},{"name":"stderr","text":" 24%|██▍       | 12/50 [26:23<1:23:53, 132.47s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 12/50, Train Loss: 0.6904,           Validation Loss: 0.8960, Duration: 0:02:14.756766, Best Val Epoch: 10\n","output_type":"stream"},{"name":"stderr","text":" 26%|██▌       | 13/50 [28:34<1:21:24, 132.01s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 13/50, Train Loss: 0.6866,           Validation Loss: 0.8842, Duration: 0:02:10.969311, Best Val Epoch: 12\n","output_type":"stream"},{"name":"stderr","text":" 28%|██▊       | 14/50 [30:45<1:19:04, 131.78s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 14/50, Train Loss: 0.6829,           Validation Loss: 0.8781, Duration: 0:02:11.251697, Best Val Epoch: 13\n","output_type":"stream"},{"name":"stderr","text":" 30%|███       | 15/50 [32:55<1:16:32, 131.22s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 15/50, Train Loss: 0.6794,           Validation Loss: 0.8777, Duration: 0:02:09.916354, Best Val Epoch: 14\n","output_type":"stream"},{"name":"stderr","text":" 32%|███▏      | 16/50 [35:05<1:14:08, 130.84s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 16/50, Train Loss: 0.6777,           Validation Loss: 0.8775, Duration: 0:02:09.936248, Best Val Epoch: 15\n","output_type":"stream"},{"name":"stderr","text":" 34%|███▍      | 17/50 [37:16<1:11:59, 130.89s/it]","output_type":"stream"},{"name":"stdout","text":"model saved\nEpoch 17/50, Train Loss: 0.6755,           Validation Loss: 0.8754, Duration: 0:02:10.999376, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 36%|███▌      | 18/50 [39:27<1:09:49, 130.91s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 18/50, Train Loss: 0.6717,           Validation Loss: 0.9033, Duration: 0:02:10.955263, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 38%|███▊      | 19/50 [41:39<1:07:44, 131.11s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 19/50, Train Loss: 0.6691,           Validation Loss: 0.8945, Duration: 0:02:11.598555, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 40%|████      | 20/50 [43:50<1:05:33, 131.11s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 20/50, Train Loss: 0.6686,           Validation Loss: 0.8955, Duration: 0:02:11.086080, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 42%|████▏     | 21/50 [45:59<1:03:07, 130.59s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 21/50, Train Loss: 0.6650,           Validation Loss: 0.8896, Duration: 0:02:09.398134, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 44%|████▍     | 22/50 [48:10<1:00:53, 130.50s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 22/50, Train Loss: 0.6630,           Validation Loss: 0.8894, Duration: 0:02:10.272895, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 46%|████▌     | 23/50 [50:18<58:29, 129.98s/it]  ","output_type":"stream"},{"name":"stdout","text":"Epoch 23/50, Train Loss: 0.6607,           Validation Loss: 0.8843, Duration: 0:02:08.761531, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 48%|████▊     | 24/50 [52:28<56:18, 129.93s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 24/50, Train Loss: 0.6593,           Validation Loss: 0.8856, Duration: 0:02:09.803765, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 50%|█████     | 25/50 [54:39<54:16, 130.26s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 25/50, Train Loss: 0.6573,           Validation Loss: 0.8947, Duration: 0:02:11.051461, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 52%|█████▏    | 26/50 [56:48<51:58, 129.95s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 26/50, Train Loss: 0.6562,           Validation Loss: 0.9051, Duration: 0:02:09.212541, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 54%|█████▍    | 27/50 [58:58<49:47, 129.89s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 27/50, Train Loss: 0.6545,           Validation Loss: 0.9127, Duration: 0:02:09.736112, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 56%|█████▌    | 28/50 [1:01:09<47:42, 130.12s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 28/50, Train Loss: 0.6533,           Validation Loss: 0.8969, Duration: 0:02:10.660008, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 58%|█████▊    | 29/50 [1:03:18<45:26, 129.85s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 29/50, Train Loss: 0.6512,           Validation Loss: 0.8988, Duration: 0:02:09.226272, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 60%|██████    | 30/50 [1:05:27<43:11, 129.56s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 30/50, Train Loss: 0.6509,           Validation Loss: 0.8908, Duration: 0:02:08.882833, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 62%|██████▏   | 31/50 [1:07:36<41:00, 129.48s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 31/50, Train Loss: 0.6494,           Validation Loss: 0.8916, Duration: 0:02:09.281818, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 64%|██████▍   | 32/50 [1:09:47<38:59, 129.97s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 32/50, Train Loss: 0.6485,           Validation Loss: 0.8828, Duration: 0:02:11.124425, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 66%|██████▌   | 33/50 [1:11:58<36:53, 130.18s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 33/50, Train Loss: 0.6471,           Validation Loss: 0.8857, Duration: 0:02:10.653933, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 68%|██████▊   | 34/50 [1:14:08<34:43, 130.20s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 34/50, Train Loss: 0.6460,           Validation Loss: 0.8819, Duration: 0:02:10.244490, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 70%|███████   | 35/50 [1:16:18<32:31, 130.08s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 35/50, Train Loss: 0.6453,           Validation Loss: 0.8813, Duration: 0:02:09.814915, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 72%|███████▏  | 36/50 [1:18:29<30:23, 130.22s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 36/50, Train Loss: 0.6437,           Validation Loss: 0.8952, Duration: 0:02:10.533896, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 74%|███████▍  | 37/50 [1:20:38<28:11, 130.11s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 37/50, Train Loss: 0.6432,           Validation Loss: 0.8837, Duration: 0:02:09.852730, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 76%|███████▌  | 38/50 [1:22:49<26:02, 130.19s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 38/50, Train Loss: 0.6422,           Validation Loss: 0.8933, Duration: 0:02:10.369561, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 78%|███████▊  | 39/50 [1:25:00<23:56, 130.59s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 39/50, Train Loss: 0.6415,           Validation Loss: 0.8934, Duration: 0:02:11.529188, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 80%|████████  | 40/50 [1:27:11<21:45, 130.56s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 40/50, Train Loss: 0.6411,           Validation Loss: 0.8978, Duration: 0:02:10.476548, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 82%|████████▏ | 41/50 [1:29:21<19:34, 130.55s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 41/50, Train Loss: 0.6405,           Validation Loss: 0.8793, Duration: 0:02:10.545282, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 84%|████████▍ | 42/50 [1:31:32<17:24, 130.50s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 42/50, Train Loss: 0.6389,           Validation Loss: 0.8881, Duration: 0:02:10.381370, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 86%|████████▌ | 43/50 [1:33:43<15:15, 130.82s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 43/50, Train Loss: 0.6385,           Validation Loss: 0.9062, Duration: 0:02:11.554801, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 88%|████████▊ | 44/50 [1:35:53<13:03, 130.53s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 44/50, Train Loss: 0.6410,           Validation Loss: 0.8964, Duration: 0:02:09.870849, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 90%|█████████ | 45/50 [1:38:04<10:53, 130.70s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 45/50, Train Loss: 0.6383,           Validation Loss: 0.9035, Duration: 0:02:11.087717, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 92%|█████████▏| 46/50 [1:40:15<08:42, 130.73s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 46/50, Train Loss: 0.6367,           Validation Loss: 0.8981, Duration: 0:02:10.781808, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 94%|█████████▍| 47/50 [1:42:26<06:32, 130.73s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 47/50, Train Loss: 0.6367,           Validation Loss: 0.8918, Duration: 0:02:10.730888, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 96%|█████████▌| 48/50 [1:44:35<04:20, 130.32s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 48/50, Train Loss: 0.6349,           Validation Loss: 0.8763, Duration: 0:02:09.365912, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":" 98%|█████████▊| 49/50 [1:46:45<02:10, 130.22s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 49/50, Train Loss: 0.6352,           Validation Loss: 0.8891, Duration: 0:02:09.991293, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 50/50 [1:48:55<00:00, 130.71s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 50/50, Train Loss: 0.6347,           Validation Loss: 0.8858, Duration: 0:02:09.633927, Best Val Epoch: 16\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"code","source":"torch.save(model.state_dict(), 'deeplob_our_data')","metadata":{"execution":{"iopub.status.busy":"2023-11-28T15:06:00.617398Z","iopub.execute_input":"2023-11-28T15:06:00.617788Z","iopub.status.idle":"2023-11-28T15:06:00.635375Z","shell.execute_reply.started":"2023-11-28T15:06:00.617748Z","shell.execute_reply":"2023-11-28T15:06:00.634618Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15,6))\nplt.plot(train_losses, label='train loss')\nplt.plot(val_losses, label='validation loss')\nplt.legend()","metadata":{"execution":{"iopub.status.busy":"2023-11-28T15:06:00.636696Z","iopub.execute_input":"2023-11-28T15:06:00.636994Z","iopub.status.idle":"2023-11-28T15:06:01.031136Z","shell.execute_reply.started":"2023-11-28T15:06:00.636968Z","shell.execute_reply":"2023-11-28T15:06:01.030074Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"<matplotlib.legend.Legend at 0x78b0caff2c80>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Model Testing","metadata":{}},{"cell_type":"code","source":"model = torch.load('best_val_model_pytorch')\n\nn_correct = 0.\nn_total = 0.\nfor inputs, targets in test_loader:\n    # Move to GPU\n    inputs, targets = inputs.to(device, dtype=torch.float), targets.to(device, dtype=torch.int64)\n\n    # Forward pass\n    outputs = model(inputs)\n    \n    # Get prediction\n    # torch.max returns both max and argmax\n    _, predictions = torch.max(outputs, 1)\n\n    # update counts\n    n_correct += (predictions == targets).sum().item()\n    n_total += targets.shape[0]\n\ntest_acc = n_correct / n_total\nprint(f\"Test acc: {test_acc:.4f}\")","metadata":{"execution":{"iopub.status.busy":"2023-11-28T15:06:01.034031Z","iopub.execute_input":"2023-11-28T15:06:01.034345Z","iopub.status.idle":"2023-11-28T15:06:24.050641Z","shell.execute_reply.started":"2023-11-28T15:06:01.034318Z","shell.execute_reply":"2023-11-28T15:06:24.049488Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"Test acc: 0.7095\n","output_type":"stream"}]},{"cell_type":"code","source":"# model = torch.load('best_val_model_pytorch')\nall_targets = []\nall_predictions = []\n\nfor inputs, targets in test_loader:\n    # Move to GPU\n    inputs, targets = inputs.to(device, dtype=torch.float), targets.to(device, dtype=torch.int64)\n\n    # Forward pass\n    outputs = model(inputs)\n    \n    # Get prediction\n    # torch.max returns both max and argmax\n    _, predictions = torch.max(outputs, 1)\n\n    all_targets.append(targets.cpu().numpy())\n    all_predictions.append(predictions.cpu().numpy())\n\nall_targets = np.concatenate(all_targets)    \nall_predictions = np.concatenate(all_predictions)    ","metadata":{"execution":{"iopub.status.busy":"2023-11-28T15:06:24.052157Z","iopub.execute_input":"2023-11-28T15:06:24.052694Z","iopub.status.idle":"2023-11-28T15:06:46.891298Z","shell.execute_reply.started":"2023-11-28T15:06:24.052652Z","shell.execute_reply":"2023-11-28T15:06:46.890230Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"print('accuracy_score:', accuracy_score(all_targets, all_predictions))\nprint(classification_report(all_targets, all_predictions, digits=4))","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2023-11-28T15:06:46.893551Z","iopub.execute_input":"2023-11-28T15:06:46.893863Z","iopub.status.idle":"2023-11-28T15:06:47.016657Z","shell.execute_reply.started":"2023-11-28T15:06:46.893839Z","shell.execute_reply":"2023-11-28T15:06:47.015576Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"accuracy_score: 0.7094827586206897\n              precision    recall  f1-score   support\n\n           0     0.7260    0.7138    0.7198     36834\n           1     0.8122    0.6229    0.7051     36926\n           2     0.6215    0.8086    0.7028     30640\n\n    accuracy                         0.7095    104400\n   macro avg     0.7199    0.7151    0.7092    104400\nweighted avg     0.7258    0.7095    0.7096    104400\n\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}
